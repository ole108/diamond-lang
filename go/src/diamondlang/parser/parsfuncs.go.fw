@C@<Constructing the AST from tokens@>

@O@<parser/parsfuncs.go@>==@{
package parser

import (
  "diamondlang/common";
  "diamondlang/lexer";
)

@<Parse literal number expression@>

@<Parse literal character expression@>

@<Parse literal string expression@>

@<Parse value or constant expression@>
@}

@D Number expressions are easy to parse since only 8 byte integers are
possible. Thus the only possible current token is an integer token that
already contains the converted value.
@$@<Parse literal number expression@>==@{
func (p *parser) ParseNumberExpr() common.ExprAst {
  it := lexer.Token2int(p.curTok);
  pi := new(int64);
  *pi = it.Value();
  p.fetchNextToken(); // consume the number
  return NewLiteralExprAst(it.SourcePiece(), common.TYPE_INT, pi);
}
@}

@D
@$@<Parse literal character expression@>==@{
func (p *parser) ParseCharExpr() common.ExprAst {
  ct := lexer.Token2char(p.curTok);
  pc := new(byte);
  *pc = ct.Value();
  p.fetchNextToken(); // consume the character
  return NewLiteralExprAst(ct.SourcePiece(), common.TYPE_CHAR, pc);
}
@}

@D
@$@<Parse literal string expression@>==@{
func (p *parser) ParseStringExpr() common.ExprAst {
  st := lexer.Token2string(p.curTok);
  ps := new(string);
  *ps = st.Value();
  p.fetchNextToken(); // consume the character
  return NewLiteralExprAst(st.SourcePiece(), common.TYPE_CHAR, ps);
}
@}

@D Values and constants are both signaled by ID tokens.
According to the type of the current token the right type of identifier
is parsed.

@{parts2subs@} is a helper function that converts the ID parts of the lexer
into sub IDs of the parser.
@$@<Parse value or constant expression@>==@{
func (p *parser) ParseValConstExpr() common.ExprAst {
  ret := common.ExprAst(nil);
  it := lexer.Token2id(p.curTok);
  parts := it.Parts();
  mainPart := parts[0];

  if it.Type() == common.TOK_CONST_ID {
    ret = parseConstExpr(it, parts, mainPart);
  } else {
    ret = parseValExpr(it, parts, mainPart);
  }

  p.fetchNextToken(); // consume the identifier
  return ret;
}

@<Parse constant expression@>

@<Parse value expression@>

func parts2subs(parts []*lexer.IdPart) []common.SubId {
  subs := make([]common.SubId, len(parts));
  for i, part := range parts {
    subs[i] = common.SubId{part.Id(), common.TYPE_UNKNOWN, part.Protected()};
  }
  return subs;
}
@}

@E Constant expressions mustn't contain protected parts and may have a
module ID at the front.
@$@<Parse constant expression@>==@{
func parseConstExpr(it *lexer.IdTok, parts []*lexer.IdPart,
                    mainPart *lexer.IdPart) common.ExprAst {
  if protectedId(parts) {
    it.Error("Protected constants don't make sense");
  }
  module := "";
  subStart := 1;
  if mainPart.Type() == common.TOK_MODULE_ID {
    module = mainPart.Id();
    mainPart = parts[subStart];
    subStart++;
  }
  return NewConstantExprAst(it.SourcePiece(), module, mainPart.Id(),
                            parts2subs(parts[subStart:len(parts)]));
}

func protectedId(parts []*lexer.IdPart) bool {
  for _, part := range parts {
    if part.Protected() { return true; }
  }
  return false;
}
@}

@E A value ID expression can't reference to a value in another package
since we don't support global variables.

Since values are always syntactically local to a function, they can't
be protected.
@$@<Parse value expression@>==@{
func parseValExpr(it *lexer.IdTok, parts []*lexer.IdPart,
                  mainPart *lexer.IdPart) common.ExprAst {
  if mainPart.Protected() {
    it.Error("Values protected at their first level don't make sense");
  }
  return NewValueExprAst(it.SourcePiece(), mainPart.Id(),
                         parts2subs(parts[1:len(parts)]));
}
@}

