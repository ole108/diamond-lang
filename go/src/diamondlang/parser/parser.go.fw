@B@<Package parser@>
The parser contains definitions for the abstract syntax tree (AST),
the parser type, some helper functions and
the parser funcitons that transforms a stream of tokens into an AST.

The file @{parser.go@} contains only the parser type and the
helper functions.
@O@<parser/parser.go@>==@{@-
package parser

import (
  "diamondlang/common";
)

@<Parser type@>

@<Helper functions@>
@}

@C The parser type contains a token buffer and remembers the current token
for itself (for easy access).

Furthermore the parser struct contains a precedence slice for infix
operators and a boolean that signals whether half indents are allowd
at the current point.
@$@<Parser type@>==@{
type parser struct {
  tb                 common.TokenBuffer; // our source for tokens
  curTok             common.Token;       // current token
  infixPrecedences   []int;
  halfIndentsAllowed bool;
}

func NewParser(tb common.TokenBuffer) common.Parser {
  p := &parser{tb, nil, infixPrecedences(), false};
  p.fetchNextToken();
  return p;
}
@}

@C Several helper functions support the parser.
@$@<Helper functions@>==@{
@<Error handling@>

@<Fetch next token@>

@<Make infix operator precedence list@>

@<Infix precedence for operator@>
@}

@D Error handling is simply done by calling on the error handling of the
token buffer.
@$@<Error handling@>==@{
func (p *parser) Error(msg string) {
  p.tb.Error(msg);
}
@}

@D Fetch the next token from the token buffer and store it in @{p.curTok@}.
Comments and white space are ignored.
@$@<Fetch next token@>==@{
/// fetchNextToken - Fetch the next meaningful token from the token buffer.
func (p *parser) fetchNextToken() {
  tok := p.tb.GetToken();
  for tok.Type() == common.TOK_SPACE || tok.Type() == common.TOK_COMMENT {
    tok = p.tb.GetToken();
  }
  p.curTok = tok;
}
@}

@D
@$@<Make infix operator precedence list@>==@{
func infixPrecedences() []int {
  var ip [128]int;
  for c := 'A'; c <= 'Z'; c++ { ip[c] = 10; }
  ip['_'] = 10;  // for protected functions
  ip['='] = 20;
  ip['?'] = 20;
  ip['!'] = 20;
  ip['<'] = 20;
  ip['>'] = 20;
  ip['|'] = 30;
  ip['&'] = 40;
  ip['+'] = 60;
  ip['-'] = 60;
  ip['*'] = 70;
  ip['/'] = 70;
  ip['%'] = 70;
  ip['^'] = 80;
  ip['~'] = 90;
  ip['$'] = 90;  // highest.
  return &ip;
}
@}

@D
@$@<Infix precedence for operator@>==@{
/// infixPrecedence - Get the precedence of the pending binary operator token.
func (p *parser) infixPrecedence(operator string) int {
  tokPrec := p.infixPrecedences[operator[0]];
  // Make sure it's a declared binop.
  if tokPrec <= 0 {
    p.Error("Undefined start of a binary operator '" + operator + "'");
  }
  return tokPrec;
}
@}


@i parser/ast.go.fw

@i parser/parsfuncs.go.fw

