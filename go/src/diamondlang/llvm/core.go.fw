@C The @{core@} macro contains wrapper functions corresponding
to the header file @{llvm-c/Core.h@} of the LLVM C binding.
@$@<core@>==@{
type Type         C.LLVMTypeRef;
type Value        C.LLVMValueRef;
type BasicBlock   C.LLVMBasicBlockRef;
type Builder      C.LLVMBuilderRef;

@<coreConstants@>
@<Operations on contexts@>
@<Operations on modules@>
@<Operations on integer types@>
@<Operations on function types@>
@<Operations on functions@>
@<Operations on parameters@>
@<Operations on basic blocks@>
@<Operations on instruction builders@>
@<Operations on values@>
@}

@D The usage of the C constants is really awkward because they are
stongly typed signed integers and we need strongly typed unsigned integers.
A conversion at runtime fails because the constants are defined as literals
in a header file and thus don't exist anymore at runtime.
Thus we redefine the constants.
@$@<coreConstants@>==@{
type CallConv uint;
const (
  CCallConv           = 0;
  FastCallConv        = 8;
  ColdCallConv        = 9;
  X86StdcallCallConv  = 64;
  X86FastcallCallConv = 65;
)


type IntPredicate int;
const (
  IntEQ = 32 + iota; /**< equal */
  IntNE;      /**< not equal */
  IntUGT;     /**< unsigned greater than */
  IntUGE;     /**< unsigned greater or equal */
  IntULT;     /**< unsigned less than */
  IntULE;     /**< unsigned less or equal */
  IntSGT;     /**< signed greater than */
  IntSGE;     /**< signed greater or equal */
  IntSLT;     /**< signed less than */
  IntSLE;     /**< signed less or equal */
)
@}


@D A LLVM context simply exists for thread safety.
It allows parallel compilation of independent LLVM modules.

We will just work with the global LLVM context for a long time.
@$@<Operations on contexts@>==@{
type Context C.LLVMContextRef;

@<ContextCreate@>
@<GetGlobalContext@>
@}

@E
@$@<ContextCreate@>==@{
func ContextCreate() Context {
  return Context(C.LLVMContextCreate());
}
@}

@E
@$@<GetGlobalContext@>==@{
func GetGlobalContext() Context {
  return Context(C.LLVMGetGlobalContext());
}
@}


@D LLVM modules correspond nicely to diamonds packages and contain mainly
a symbol table and a list of functions.
@$@<Operations on modules@>==@{
type Module C.LLVMModuleRef;

@<ModuleCreateWithName@>
@<ModuleCreateWithNameInContext@>
@<DisposeModule@>
@<DumpModule@>
@}

@E Create a LLVM module with the given name and the global LLVM context.
@$@<ModuleCreateWithName@>==@{
func ModuleCreateWithName(moduleId string) Module {
    var mod C.LLVMModuleRef;
    callWithString(func(s *C.char){ mod = C.LLVMModuleCreateWithName(s); },
                   moduleId);
    return Module(mod);
}
@}

@E Create a LLVM module with the given name and LLVM context.
@$@<ModuleCreateWithNameInContext@>==@{
func ModuleCreateWithNameInContext(moduleId string, llvmCtx Context)
       Module {
    var mod C.LLVMModuleRef;
    callWithString(func(s *C.char){
        mod = C.LLVMModuleCreateWithNameInContext(s, C.LLVMContextRef(llvmCtx));
    }, moduleId);
    return Module(mod);
}
@}

@E Deletes the given LLVM module and frees the memory used by it.
@$@<DisposeModule@>==@{
func DisposeModule(llvmModule Module) {
  C.LLVMDisposeModule(C.LLVMModuleRef(llvmModule));
}
@}

@E Print the given module in LLVM assembly language to standard output.
This is especially nice for debugging problems.
@$@<DumpModule@>==@{
func DumpModule(llvmModule Module) {
  C.LLVMDumpModule(C.LLVMModuleRef(llvmModule));
}
@}


@D LLVM supports arbitrary integer types.
They can range from 1 bit up to any number of bits.
The compiler doesn't support the whole flexibility and we
don't want to make use of it.

1 Bit integers are used as booleans by LLVM.
We support only 64 bit integers first but plan to introduce
8, 16, 24, 32 and 48 bit integers later.
@$@<Operations on integer types@>==@{
func Int1TypeInContext(ctx Context) Type {
    return Type(C.LLVMInt1TypeInContext(C.LLVMContextRef(ctx)));
}

func Int8TypeInContext(ctx Context) Type {
    return Type(C.LLVMInt8TypeInContext(C.LLVMContextRef(ctx)));
}

func Int16TypeInContext(ctx Context) Type {
    return Type(C.LLVMInt16TypeInContext(C.LLVMContextRef(ctx)));
}

func Int32TypeInContext(ctx Context) Type {
    return Type(C.LLVMInt32TypeInContext(C.LLVMContextRef(ctx)));
}

func Int64TypeInContext(ctx Context) Type {
    return Type(C.LLVMInt64TypeInContext(C.LLVMContextRef(ctx)));
}

func IntTypeInContext(ctx Context, numBits uint) Type {
    return Type(C.LLVMIntTypeInContext(C.LLVMContextRef(ctx),
                                       C.unsigned(numBits)));
}


func Int1Type() Type {
    return Type(C.LLVMInt1Type());
}

func Int8Type() Type {
    return Type(C.LLVMInt8Type());
}

func Int16Type() Type {
    return Type(C.LLVMInt16Type());
}

func Int32Type() Type {
    return Type(C.LLVMInt32Type());
}

func Int64Type() Type {
    return Type(C.LLVMInt64Type());
}

func IntType(numBits uint) Type {
    return Type(C.LLVMIntType(C.unsigned(numBits)));
}


func GetIntTypeWidth(intType Type) uint {
    return uint(C.LLVMGetIntTypeWidth(C.LLVMTypeRef(intType)));
}
@}


@D LLVM supports function types.
So functions can be first class types.
@$@<Operations on function types@>==@{
func FunctionType(returnType Type, paramTypes []Type, isVarArg bool) Type {
    paramCnt := len(paramTypes);
    params := make([]C.LLVMTypeRef, paramCnt);
    for i:=0; i < paramCnt; i++ {
        params[i] = C.LLVMTypeRef(paramTypes[i]);
    }
    isvarg := 0;
    if isVarArg { isvarg = 1; }
    return Type(C.LLVMFunctionType(C.LLVMTypeRef(returnType),
                                   &params[0], C.unsigned(paramCnt),
                                   C.int(isvarg)));
}

func IsFunctionVarArg(functionType Type) bool {
    return int(C.LLVMIsFunctionVarArg(C.LLVMTypeRef(functionType))) != 0;
}

func GetReturnType(functionType Type) Type {
    return Type(C.LLVMGetReturnType(C.LLVMTypeRef(functionType)));
}

func CountParamTypes(functionType Type) uint {
    return uint(C.LLVMCountParamTypes(C.LLVMTypeRef(functionType)));
}
@}


@D LLVM supports function types.
So functions can be first class types.
@$@<Operations on functions@>==@{
func AddFunction(mod Module, funcName string, functionType Type) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMAddFunction(C.LLVMModuleRef(mod), s,
                                C.LLVMTypeRef(functionType)));
    }, funcName);
    return ret;
}

func GetNamedFunction(mod Module, funcName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMGetNamedFunction(C.LLVMModuleRef(mod), s));
    }, funcName);
    return ret;
}

func GetFirstFunction(mod Module) Value {
    return Value(C.LLVMGetFirstFunction(C.LLVMModuleRef(mod)));
}

func GetLastFunction(mod Module) Value {
    return Value(C.LLVMGetLastFunction(C.LLVMModuleRef(mod)));
}

func GetNextFunction(fun Value) Value {
    return Value(C.LLVMGetNextFunction(C.LLVMValueRef(fun)));
}

func GetPreviousFunction(fun Value) Value {
    return Value(C.LLVMGetPreviousFunction(C.LLVMValueRef(fun)));
}

func DeleteFunction(fun Value) {
    C.LLVMDeleteFunction(C.LLVMValueRef(fun));
}

func GetIntrinsicID(fun Value) uint {
    return uint(C.LLVMGetIntrinsicID(C.LLVMValueRef(fun)));
}

func GetFunctionCallConv(fun Value) CallConv {
    return CallConv(C.LLVMGetFunctionCallConv(C.LLVMValueRef(fun)));
}

func SetFunctionCallConv(fun Value, callConv CallConv) {
    C.LLVMSetFunctionCallConv(C.LLVMValueRef(fun), C.unsigned(callConv));
}

func GetGC(fun Value) string {
    return C.GoString(C.LLVMGetGC(C.LLVMValueRef(fun)));
}

func SetGC(fun Value, gcName string) {
    callWithString(func(s *C.char){
        C.LLVMSetGC(C.LLVMValueRef(fun), s);
    }, gcName);
}
@}


@D LLVM operations on function parameters.
@$@<Operations on parameters@>==@{
func CountParams(fun Value) uint {
    return uint(C.LLVMCountParams(C.LLVMValueRef(fun)));
}


func GetParams(fun Value) []Value {
    tmp := make([]C.LLVMValueRef, CountParams(fun));
    C.LLVMGetParams(C.LLVMValueRef(fun), &tmp[0]);
    ret := make([]Value, len(tmp));
    for i := 0; i < len(tmp); i++ {
        ret[i] = Value(tmp[i]);
    }
    return ret;
}

func GetParam(fun Value, idx uint) Value {
    return Value(C.LLVMGetParam(C.LLVMValueRef(fun), C.unsigned(idx)));
}

func GetParamParent(inst Value) Value {
    return Value(C.LLVMGetParamParent(C.LLVMValueRef(inst)));
}

func GetFirstParam(fun Value) Value {
    return Value(C.LLVMGetFirstParam(C.LLVMValueRef(fun)));
}

func GetLastParam(fun Value) Value {
    return Value(C.LLVMGetLastParam(C.LLVMValueRef(fun)));
}

func GetNextParam(arg Value) Value {
    return Value(C.LLVMGetNextParam(C.LLVMValueRef(arg)));
}

func GetPreviousParam(arg Value) Value {
    return Value(C.LLVMGetPreviousParam(C.LLVMValueRef(arg)));
}

func SetParamAlignment(arg Value, align uint) {
    C.LLVMSetParamAlignment(C.LLVMValueRef(arg), C.unsigned(align));
}
@}

@D LLVM operations on basic blocks (parts of function bodies).
@$@<Operations on basic blocks@>==@{
func BasicBlockAsValue(basicBlock BasicBlock) Value {
    return Value(C.LLVMBasicBlockAsValue(C.LLVMBasicBlockRef(basicBlock)));
}

func ValueIsBasicBlock(val Value) bool {
    return 0 != C.LLVMValueIsBasicBlock(C.LLVMValueRef(val));
}

func ValueAsBasicBlock(val Value) BasicBlock {
    return BasicBlock(C.LLVMValueAsBasicBlock(C.LLVMValueRef(val)));
}

func GetBasicBlockParent(basicBlock BasicBlock) Value {
    return Value(C.LLVMGetBasicBlockParent(C.LLVMBasicBlockRef(basicBlock)));
}

func CountBasicBlocks(fun Value) uint {
    return uint(C.LLVMCountBasicBlocks(C.LLVMValueRef(fun)));
}

func GetBasicBlocks(fun Value) []BasicBlock {
    tmp := make([]C.LLVMBasicBlockRef, CountBasicBlocks(fun));
    C.LLVMGetBasicBlocks(C.LLVMValueRef(fun), &tmp[0]);
    ret := make([]BasicBlock, len(tmp));
    for i := 0; i < len(tmp); i++ {
        ret[i] = BasicBlock(tmp[i]);
    }
    return ret;
}

func GetFirstBasicBlock(fun Value) BasicBlock {
    return BasicBlock(C.LLVMGetFirstBasicBlock(C.LLVMValueRef(fun)));
}

func GetLastBasicBlock(fun Value) BasicBlock {
    return BasicBlock(C.LLVMGetLastBasicBlock(C.LLVMValueRef(fun)));
}

func GetNextBasicBlock(basicBlock BasicBlock) BasicBlock {
    return BasicBlock(C.LLVMGetNextBasicBlock(
               C.LLVMBasicBlockRef(basicBlock)))
}

func GetPreviousBasicBlock(basicBlock BasicBlock) BasicBlock {
    return BasicBlock(C.LLVMGetPreviousBasicBlock(
               C.LLVMBasicBlockRef(basicBlock)))
}

func GetEntryBasicBlock(fun Value) BasicBlock {
    return BasicBlock(C.LLVMGetEntryBasicBlock(C.LLVMValueRef(fun)));
}

func AppendBasicBlockInContext(ctx Context, fun Value,
                               blockName string) BasicBlock {
    var ret BasicBlock;
    callWithString(func(s *C.char){
        ret = BasicBlock(C.LLVMAppendBasicBlockInContext(
                             C.LLVMContextRef(ctx),
                             C.LLVMValueRef(fun),
                             s));
    }, blockName);
    return ret;
}

func InsertBasicBlockInContext(ctx Context, basicBlock BasicBlock,
                               blockName string) BasicBlock {
    var ret BasicBlock;
    callWithString(func(s *C.char){
        ret = BasicBlock(C.LLVMInsertBasicBlockInContext(
                             C.LLVMContextRef(ctx),
                             C.LLVMBasicBlockRef(basicBlock),
                             s));
    }, blockName);
    return ret;
}

func AppendBasicBlock(fun Value, blockName string) BasicBlock {
    var ret BasicBlock;
    callWithString(func(s *C.char){
        ret = BasicBlock(C.LLVMAppendBasicBlock(C.LLVMValueRef(fun), s));
    }, blockName);
    return ret;
}

func InsertBasicBlock(basicBlock BasicBlock, blockName string) BasicBlock {
    var ret BasicBlock;
    callWithString(func(s *C.char){
        ret = BasicBlock(C.LLVMInsertBasicBlock(
                             C.LLVMBasicBlockRef(basicBlock), s));
    }, blockName);
    return ret;
}

func DeleteBasicBlock(basicBlock BasicBlock) {
    C.LLVMDeleteBasicBlock(C.LLVMBasicBlockRef(basicBlock));
}
@}


@D LLVM operations on instruction builders.
An instruction builder represents a point within a basic block, and is the
exclusive means of building instructions.
@$@<Operations on instruction builders@>==@{
@<Basic operations on instruction builders@>
@<Build comparison instructions@>
@<Build terminators@>
@<Build arithmetic operations@>
@<Build miscellaneous instructions@>
@}


@E Basic operations on instruction builders.
@$@<Basic operations on instruction builders@>==@{
func CreateBuilder() Builder {
    return Builder(C.LLVMCreateBuilder());
}

func CreateBuilderInContext(ctx Context) Builder {
    return Builder(C.LLVMCreateBuilderInContext(C.LLVMContextRef(ctx)));
}

func PositionBuilder(builder Builder, basicBlock BasicBlock, instr Value) {
    C.LLVMPositionBuilder(C.LLVMBuilderRef(builder),
                          C.LLVMBasicBlockRef(basicBlock),
                          C.LLVMValueRef(instr));
}

func PositionBuilderBefore(builder Builder, instr Value) {
    C.LLVMPositionBuilderBefore(C.LLVMBuilderRef(builder),
                                C.LLVMValueRef(instr));
}

func PositionBuilderAtEnd(builder Builder, basicBlock BasicBlock) {
    C.LLVMPositionBuilderAtEnd(C.LLVMBuilderRef(builder),
                               C.LLVMBasicBlockRef(basicBlock));
}

func GetInsertBlock(builder Builder) BasicBlock {
    return BasicBlock(C.LLVMGetInsertBlock(C.LLVMBuilderRef(builder)));
}

func ClearInsertionPosition(builder Builder) {
    C.LLVMClearInsertionPosition(C.LLVMBuilderRef(builder));
}

func InsertIntoBuilder(builder Builder, instr Value) {
    C.LLVMInsertIntoBuilder(C.LLVMBuilderRef(builder),
                            C.LLVMValueRef(instr));
}

func InsertIntoBuilderWithName(builder Builder, instr Value, instrName string) {
    callWithString(func(s *C.char){
        C.LLVMInsertIntoBuilderWithName(C.LLVMBuilderRef(builder),
                                        C.LLVMValueRef(instr), s);
    }, instrName);
}

func DisposeBuilder(builder Builder) {
    C.LLVMDisposeBuilder(C.LLVMBuilderRef(builder));
}
@}


@E Functions that build comparison instructions.
@$@<Build comparison instructions@>==@{
func BuildICmp(builder Builder, op IntPredicate, lhs Value, rhs Value,
               instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildICmp(C.LLVMBuilderRef(builder),
                                    C.LLVMIntPredicate(op),
                                    C.LLVMValueRef(lhs),
                                    C.LLVMValueRef(rhs),
                                    s));
    }, instrName);
    return ret;
}
@}

@E Functions that build block terminators.
@$@<Build terminators@>==@{
func BuildBr(builder Builder, destBlock BasicBlock) Value {
    return Value(C.LLVMBuildBr(C.LLVMBuilderRef(builder),
                               C.LLVMBasicBlockRef(destBlock)));
}

func BuildRetVoid(builder Builder) Value {
    return Value(C.LLVMBuildRetVoid(C.LLVMBuilderRef(builder)));
}

func BuildRet(builder Builder, ret Value) Value {
    return Value(C.LLVMBuildRet(C.LLVMBuilderRef(builder),
                                C.LLVMValueRef(ret)));
}

func BuildAggregateRet(builder Builder, rets []Value) Value {
    tmp := make([]C.LLVMValueRef, len(rets));
    for i := 0; i < len(tmp); i++ {
        tmp[i] = C.LLVMValueRef(rets[i]);
    }
    return Value(C.LLVMBuildAggregateRet(C.LLVMBuilderRef(builder),
                                &tmp[0], C.unsigned(len(rets)) ));
}

func BuildCondBr(builder Builder, ifCond Value, thenBlock BasicBlock,
                 elseBlock BasicBlock) Value {
    return Value(C.LLVMBuildCondBr(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(ifCond),
                                   C.LLVMBasicBlockRef(thenBlock),
                                   C.LLVMBasicBlockRef(elseBlock)));
}

func BuildSwitch(builder Builder, val Value, elseBlock BasicBlock,
                 numCases uint) Value {
    return Value(C.LLVMBuildSwitch(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(val),
                                   C.LLVMBasicBlockRef(elseBlock),
                                   C.unsigned(numCases)));
}

func BuildInvoke(builder Builder, fun Value, args []Value,
                 thenBlock BasicBlock, catchBlock BasicBlock,
                 instrName string) Value {

    tmp := make([]C.LLVMValueRef, len(args));
    for i := 0; i < len(tmp); i++ {
        tmp[i] = C.LLVMValueRef(args[i]);
    }

    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildInvoke(C.LLVMBuilderRef(builder),
                                      C.LLVMValueRef(fun),
                                      &tmp[0], C.unsigned(len(tmp)),
                                      C.LLVMBasicBlockRef(thenBlock),
                                      C.LLVMBasicBlockRef(catchBlock),
                                      s));
    }, instrName);
    return ret;
}

func BuildUnwind(builder Builder) Value {
    return Value(C.LLVMBuildUnwind(C.LLVMBuilderRef(builder)));
}

func BuildUnreachable(builder Builder) Value {
    return Value(C.LLVMBuildUnreachable(C.LLVMBuilderRef(builder)));
}
@}


@E Functions for building arithmetic operations.
@$@<Build arithmetic operations@>==@{
func BuildSub(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildSub(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildAdd(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildAdd(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildNSWAdd(builder Builder, lhs Value, rhs Value, instrName string)
        Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildNSWAdd(C.LLVMBuilderRef(builder),
                                      C.LLVMValueRef(lhs),
                                      C.LLVMValueRef(rhs),
                                      s));
    }, instrName);
    return ret;
}

func BuildMul(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildMul(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildSDiv(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildSDiv(C.LLVMBuilderRef(builder),
                                    C.LLVMValueRef(lhs),
                                    C.LLVMValueRef(rhs),
                                    s));
    }, instrName);
    return ret;
}

func BuildExactSDiv(builder Builder, lhs Value, rhs Value, instrName string)
        Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildExactSDiv(C.LLVMBuilderRef(builder),
                                         C.LLVMValueRef(lhs),
                                         C.LLVMValueRef(rhs),
                                         s));
    }, instrName);
    return ret;
}

func BuildSRem(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildSRem(C.LLVMBuilderRef(builder),
                                    C.LLVMValueRef(lhs),
                                    C.LLVMValueRef(rhs),
                                    s));
    }, instrName);
    return ret;
}

func BuildShl(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildShl(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildLShr(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildLShr(C.LLVMBuilderRef(builder),
                                    C.LLVMValueRef(lhs),
                                    C.LLVMValueRef(rhs),
                                    s));
    }, instrName);
    return ret;
}

func BuildAnd(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildAnd(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildOr(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildOr(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildXor(builder Builder, lhs Value, rhs Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildXor(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(lhs),
                                   C.LLVMValueRef(rhs),
                                   s));
    }, instrName);
    return ret;
}

func BuildNeg(builder Builder, val Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildNeg(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(val),
                                   s));
    }, instrName);
    return ret;
}

func BuildNot(builder Builder, val Value, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildNot(C.LLVMBuilderRef(builder),
                                   C.LLVMValueRef(val),
                                   s));
    }, instrName);
    return ret;
}
@}


@E Functions for building miscellaneous instructions.
@$@<Build miscellaneous instructions@>==@{
func BuildPhi(builder Builder, typ Type, instrName string) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildPhi(C.LLVMBuilderRef(builder),
                                   C.LLVMTypeRef(typ),
                                   s));
    }, instrName);
    return ret;
}

func BuildCall(builder Builder, fun Value, args []Value, instrName string)
        Value {

    tmp := make([]C.LLVMValueRef, len(args));
    for i := 0; i < len(tmp); i++ {
        tmp[i] = C.LLVMValueRef(args[i]);
    }

    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMBuildCall(C.LLVMBuilderRef(builder),
                                    C.LLVMValueRef(fun),
                                    &tmp[0], C.unsigned(len(args)),
                                    s));
    }, instrName);
    return ret;
}
/*
LLVMValueRef LLVMBuildSelect(LLVMBuilderRef, LLVMValueRef If,
                             LLVMValueRef Then, LLVMValueRef Else,
                             const char *Name);
LLVMValueRef LLVMBuildVAArg(LLVMBuilderRef, LLVMValueRef List, LLVMTypeRef Ty,
                            const char *Name);
LLVMValueRef LLVMBuildExtractElement(LLVMBuilderRef, LLVMValueRef VecVal,
                                     LLVMValueRef Index, const char *Name);
LLVMValueRef LLVMBuildInsertElement(LLVMBuilderRef, LLVMValueRef VecVal,
                                    LLVMValueRef EltVal, LLVMValueRef Index,
                                    const char *Name);
LLVMValueRef LLVMBuildShuffleVector(LLVMBuilderRef, LLVMValueRef V1,
                                    LLVMValueRef V2, LLVMValueRef Mask,
                                    const char *Name);
LLVMValueRef LLVMBuildExtractValue(LLVMBuilderRef, LLVMValueRef AggVal,
                                   unsigned Index, const char *Name);
LLVMValueRef LLVMBuildInsertValue(LLVMBuilderRef, LLVMValueRef AggVal,
                                  LLVMValueRef EltVal, unsigned Index,
                                  const char *Name);

LLVMValueRef LLVMBuildIsNull(LLVMBuilderRef, LLVMValueRef Val,
                             const char *Name);
LLVMValueRef LLVMBuildIsNotNull(LLVMBuilderRef, LLVMValueRef Val,
                                const char *Name);
LLVMValueRef LLVMBuildPtrDiff(LLVMBuilderRef, LLVMValueRef LHS,
                              LLVMValueRef RHS, const char *Name);
*/
@}



@D Operations on LLVM values.
The bulk of LLVM's object model consists of values, which comprise a very
rich type hierarchy.
@$@<Operations on values@>==@{
@<Operations on scalar constants@>
@}

@E Operations on LLVM scalar constants.
@$@<Operations on scalar constants@>==@{
func ConstInt(intType Type, val uint64, signed bool) Value {
    signExtend := 0;
    if signed { signExtend = 1; }
    return Value(C.LLVMConstInt(C.LLVMTypeRef(intType), C.ulonglong(val),
                                C.int(signExtend)));
}

func ConstIntOfString(intType Type, val string, radix uint8) Value {
    var ret Value;
    callWithString(func(s *C.char){
        ret = Value(C.LLVMConstIntOfStringAndSize(C.LLVMTypeRef(intType),
                                                  s, C.unsigned(len(val)),
                                                  C.uint8_t(radix)));
    }, val);
    return ret;
}
@}
