@C The @{executionEngine@} macro contains wrapper functions corresponding
to the header file @{llvm-c/ExecutionEngine.h@} of the LLVM C binding.
@$@<executionEngine@>==@{
type ExecutionEngine  C.LLVMExecutionEngineRef;

@<LinkIns@>
@<Operations on execution engines@>
@}


@D You can choose to link in the JIT (Just In Time compiler) or
the interpreter for LLVM.
@$@<LinkIns@>==@{
func LinkInInterpreter() {
    C.LLVMLinkInInterpreter();
}

func LinkInJIT() {
    C.LLVMLinkInJIT();
}
@}


@D I have still got to learn a lot about execution engines.
@$@<Operations on execution engines@>==@{
func CreateInterpreter(modProvider ModuleProvider) ExecutionEngine {
    var engine C.LLVMExecutionEngineRef;
    var error *C.char = nil;
    if C.LLVMCreateInterpreter(&engine, C.LLVMModuleProviderRef(modProvider),
                               &error) != 0 {
        fmt.Fprintln(os.Stderr, C.GoString(error));
        C.LLVMDisposeMessage(error);
        os.Exit(1);
    }
    return ExecutionEngine(engine);
}

func CreateJITCompiler(modProvider ModuleProvider, optLevel uint)
        ExecutionEngine {

    var engine C.LLVMExecutionEngineRef;
    var error *C.char = nil;
    if C.LLVMCreateJITCompiler(&engine, C.LLVMModuleProviderRef(modProvider),
                               C.unsigned(optLevel), &error) != 0 {
        fmt.Fprintln(os.Stderr, C.GoString(error));
        C.LLVMDisposeMessage(error);
        os.Exit(1);
    }
    return ExecutionEngine(engine);
}

func DisposeExecutionEngine(engine ExecutionEngine) {
    C.LLVMDisposeExecutionEngine(C.LLVMExecutionEngineRef(engine));
}
@}
