@B@<Package llvm@>
The llvm package builds an interface to the Low Level Virtual Machine (LLVM)
that is used for code generation.

Specifically this package contains wrapper functions for accessing the
LLVM C binding.
The header files for the C binding can be found at:
@{/usr/include/llvm-c/@}

We have a simple C example for a start: ~/work/llvm/*.c


@/Please Note:@/ The wrapper functions have the same name as the C binding
functions except we leave the 'LLVM' prefix out since go supports packages.


The file @{llvm.go@} contains the wrapper functions for accessing the
LLVM C binding.
@O@<llvm/llvm.go@>==@{@-
package llvm

/*
// Headers required by LLVM
#include <llvm-c/Core.h>
#include <llvm-c/Analysis.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Target.h>
#include <llvm-c/Transforms/Scalar.h>

// General stuff
#include <stdlib.h>
*/
import "C"
import "unsafe"
import "fmt"
import "os"

@<Utility functions@>

// Macros corresponding to C header files:
@<core@>
@<executionEngine@>
@<target@>
@<analysis@>

@<dirtyTestFunc@>
@}


@C
The file @{llvm_test.go@} contains tests for the LLVM interface.
@O@<llvm/llvm_test.go@>==@{@-
package llvm

import (
  "testing";
  "fmt";
)

func TestFirst(t *testing.T) {
  dirtyTestFunc(6);
}

func TestLlvm(t *testing.T) {
  fmt.Println("LinkInJIT");
  LinkInJIT();

  fmt.Println("InitializeNativeTarget");
  InitializeNativeTarget();

  fmt.Println("ModuleCreateWithNameInContext");
  llvmMod := ModuleCreateWithNameInContext("tstMod", GetGlobalContext());

  fmt.Println("DumpModule");
  DumpModule(llvmMod);

  fmt.Println("DisposeModule");
  DisposeModule(llvmMod);

  if (false) { t.Error("The LLVM interface doesn't work!"); }
}
@}



@C
@$@<dirtyTestFunc@>==@{
func dirtyTestFunc(num int) {
  LinkInJIT();
  InitializeNativeTarget();
  llvmMod := ModuleCreateWithNameInContext("tstMod", GetGlobalContext());

  fac_args := []Type{ Int32Type() };
  fac  := AddFunction(llvmMod, "fac",
                      FunctionType(Int32Type(), fac_args, false));
  SetFunctionCallConv(fac, CCallConv);
  n := GetParam(fac, 0);

  entry   := AppendBasicBlock(fac, "entry");
  iftrue  := AppendBasicBlock(fac, "iftrue");
  iffalse := AppendBasicBlock(fac, "iffalse");
  end     := AppendBasicBlock(fac, "end");
  builder := CreateBuilder();

  PositionBuilderAtEnd(builder, entry);
  if_instr := BuildICmp(builder, IntEQ, n, ConstInt(Int32Type(), 0, false),
                        "n == 0");
  C.LLVMBuildCondBr(C.LLVMBuilderRef(builder), C.LLVMValueRef(if_instr),
                    C.LLVMBasicBlockRef(iftrue),
                                 C.LLVMBasicBlockRef(iffalse));

  PositionBuilderAtEnd(builder, iftrue);
  res_iftrue := ConstInt(Int32Type(), 1, false);
  BuildBr(builder, end);

  PositionBuilderAtEnd(builder, iffalse);
  n_minus := BuildSub(builder, n, ConstInt(Int32Type(), 1, false), "n - 1");
  call_fac_args := []Value{ n_minus };
  call_fac := BuildCall(builder, fac, call_fac_args, "fac(n - 1)");
  res_iffalse := BuildMul(builder, n, call_fac, "n * fac(n - 1)");
  BuildBr(builder, end);

  PositionBuilderAtEnd(builder, end);
  res := BuildPhi(builder, Int32Type(), "result");
  phi_vals := []Value{ res_iftrue, res_iffalse };
  phi_blocks := []BasicBlock{ iftrue, iffalse };
  AddIncoming(res, phi_vals, phi_blocks);
  BuildRet(builder, res);

  VerifyModule(llvmMod);

  provider := CreateModuleProviderForExistingModule(llvmMod);
  engine := CreateJITCompiler(provider, 2);

//  DumpModule(llvmMod);
  // Optimizations:
  fmt.Println("\n\nOptimizing:");
  pass := CreatePassManager();
  AddTargetData(GetExecutionEngineTargetData(engine), pass);
  C.LLVMAddConstantPropagationPass(C.LLVMPassManagerRef(pass));
  C.LLVMAddInstructionCombiningPass(C.LLVMPassManagerRef(pass));
  C.LLVMAddPromoteMemoryToRegisterPass(C.LLVMPassManagerRef(pass));
  // Demotes every possible value to memory:
  C.LLVMAddDemoteMemoryToRegisterPass(C.LLVMPassManagerRef(pass));
  C.LLVMAddGVNPass(C.LLVMPassManagerRef(pass));
  C.LLVMAddCFGSimplificationPass(C.LLVMPassManagerRef(pass));
  opt := RunPassManager(pass, llvmMod);
  fmt.Println("Found optimization:", opt);
  DumpModule(llvmMod);

  fmt.Println("");
  fmt.Printf("Running fac(%d) with JIT...\n", num);
  exec_args := [...]C.LLVMGenericValueRef{ C.LLVMCreateGenericValueOfInt(
                        C.LLVMInt32Type(), C.ulonglong(num), 0) };
  var exec_res C.LLVMGenericValueRef = C.LLVMRunFunction(
                                C.LLVMExecutionEngineRef(engine),
                                C.LLVMValueRef(fac), 1, &exec_args[0]);
  fmt.Println("Result:", C.LLVMGenericValueToInt(exec_res, 0));

  DisposeExecutionEngine(engine);
  DisposeBuilder(builder);
  DisposePassManager(pass);
//DisposeModuleProvider(provider);  // Throws assertion!!! :-(((

  fmt.Println("Survived: ALL");
}
@}


@C
@$@<Utility functions@>==@{
@<CallStringFunc@>
@}

@D Call the given function (usually a closure) with the given string
argument. This utility function simply handles the conversion to  a
C string and the deletion of the memory for the C string.
@$@<CallStringFunc@>==@{
func callWithString(strFunc func(s *C.char), s string) {
  p := C.CString(s);
  strFunc(p);
  C.free(unsafe.Pointer(p));
}
@}


@i llvm/core.go.fw

@i llvm/executionEngine.go.fw

@i llvm/target.go.fw

@i llvm/analysis.go.fw
